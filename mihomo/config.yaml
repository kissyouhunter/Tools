#!name = mihomo 配置文件
#!source = https://wiki.metacubex.one/example/conf/#__tabbed_1_3

######### 锚点 start #######
# 策略组相关
pr: &pr {type: select, proxies: [直连, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇸🇬 狮城节点, 🇯🇵 日本节点, 🇺🇲 美国节点, 🇰🇷 韩国节点, 🚀 手动切换]}

# 这里是订阅更新和延迟测试相关的
p: &p {type: http, interval: 86400, health-check: {enable: false, url: https://www.gstatic.com/generate_204, interval: 300}}
######### 锚点 end #######

# 机场订阅 url 里填写自己的订阅,名称不能重复, path 订阅拉取到本地，去掉 url 只读取本地信息
proxy-providers:
  provider1:
    <<: *p
    path: ./proxy_provider/订阅一.yaml
    url: "https://xxx.xxx/xxxxx"

  provider2:
    <<: *p
    path: ./proxy_provider/订阅二.yaml
    url: "https://xxx.xxx/xxxxx"

  provider3:
    <<: *p
    path: ./proxy_provider/本地订阅.yaml

# 全局配置
# 开启 IPv6 总开关，关闭阻断所有 IPv6 链接和屏蔽 DNS 请求 AAAA 记录
ipv6: false
# 允许局域网的连接（可用来共享加速）
allow-lan: true
# 绑定 IP 地址，仅作用于 allow-lan 为 true，'*'表示所有地址
bind-address: "*"
# 混合端口 HTTP和SOCKS5用一个端口
mixed-port: 7890
# 更换延迟计算方式,去除握手等额外延迟
unified-delay: false
# TCP 并发连接所有 IP, 将使用最快握手的 TCP
tcp-concurrent: true
# 外部控制器,可以使用 RESTful API 来控制你的 clash 内核
external-controller: 0.0.0.0:9090
# 外部用户界面
external-ui: ui
# 自定义外部用户界面下载地址
#external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配所有进程（always/strict/off）
## always 开启，强制匹配所有进程， strict 默认，由 Clash 判断是否开启， off 不匹配进程，推荐在路由器上使用此模式
find-process-mode: strict
# 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint
## 可选： "chrome","firefox","safari","ios","random","none" options.
global-client-fingerprint: chrome

# profile 应为扩展配置，但在 Clash.meta, 仅作为缓存项使用
profile:
  # 储存 API 对策略组的选择，以供下次启动时使用
  store-selected: true
  # 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址
  store-fake-ip: true

# 嗅探域名 可选配置
sniffer:
  enable: true
# TLS 和 QUIC 默认如果不配置 ports 默认嗅探 443
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
# 需要跳过嗅探的域名
  skip-classical:
    - "Mijia Cloud"

# TUN配置
tun:
  enable: true
# 可选： system/gvisor/mixed
  stack: mixed
# 需要劫持的 DNS
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
# 配置路由表
  auto-route: true
# 自动识别出口网卡
  auto-detect-interface: true

# DNS配置
dns:
# 关闭将使用系统 DNS
  enable: true
# 开启 DNS 服务器监听
  listen: :53
  ipv6: true
# 模式：redir-host 或 fake-ip
  enhanced-mode: fake-ip
# Fake-IP解析地址池
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter:
    - "*"
    - "+.lan"
    - "+.local"
# 只能使用纯 IP 地址，可使用加密 DNS
  default-nameserver:
    - 223.5.5.5
    - 119.29.29.29
# 这部分为主要 DNS 配置，影响所有直连，确保使用对大陆解析精准的 DNS
  nameserver:
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  proxy-server-nameserver:
    - https://doh.pub/dns-query
  nameserver-policy:
    "rule-set:Cn_Domain":
      - https://doh.pub/dns-query
      - https://dns.alidns.com/dns-query
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query#dns"
      - "https://dns.google/dns-query#dns"

proxies:
- name: "直连"
  type: direct
  udp: true

# 策略组
proxy-groups:
  # 策略分流分组
  - {name: 🚀 节点选择, <<: *pr}
  - {name: 🚀 手动切换, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$"}
  - {name: 🥷 CHATGPT, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$"}
  - {name: 💻 SSH, type: select, include-all-providers: true, filter: "AWS|AZURE"}
  - {name: 💻 RDP, type: select, include-all-providers: true, filter: "AWS|AZURE"}
  - {name: 📲 电报消息, <<: *pr}
  - {name: 📹 油管视频, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$", proxies: [⛓️ 代理链]}
  - {name: 🎥 奈飞节点, type: select, include-all-providers: true, filter: "WAP"}
  - {name: 🎥 奈飞视频, type: select, proxies: [🎥 奈飞节点]}
  - {name: 🎬 AmazonPrime, type: select, proxies: [🎥 奈飞节点]}
  - {name: 🎞️ Disneyplus, type: select, proxies: [🎥 奈飞节点]}
  - {name: 🎵 Spotify, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$"}
  - {name: 📺 哔哩哔哩, type: select, proxies: [直连, 🇭🇰 香港节点, 🇨🇳 台湾节点]}
  - {name: 🌍 国外媒体, type: select, proxies: [📹 油管视频, 直连]}
  - {name: 🌏 国内媒体, <<: *pr}
  - {name: 🌍 爱奇艺国际, <<: *pr}
  - {name: 📢 谷歌FCM, <<: *pr}
  - {name: Ⓜ️ 微软云盘, <<: *pr}
  - {name: Ⓜ️ 微软服务, <<: *pr}
  - {name: 🍎 苹果服务, <<: *pr}
  - {name: 🎮 游戏平台, <<: *pr}
  - {name: 🎶 网易音乐, <<: *pr}
  - {name: 📞 Talkatone, <<: *pr}
  - {name: 🪙 PAYPAL, type: select, proxies: [直连, 🚀 手动切换]}
  - {name: 🎥 EMBY, type: select, proxies: [🚀 手动切换]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 手动切换]}
  # 地区分组筛选
  - {name: 🇭🇰 香港节点, type: select, include-all-providers: true, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🇨🇳 台湾节点, type: select, include-all-providers: true, filter: "(?=.*(台|TW|(?i)Taiwan))^((?!(港|日|韩|新|美)).)*$" }
  - {name: 🇺🇲 美国节点, type: select, include-all-providers: true, filter: "(?=.*(美|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: 🇸🇬 狮城节点, type: select, include-all-providers: true, filter: "(?=.*(新|狮|獅|SG|(?i)Singapore))^((?!(港|台|日|韩|美|西)).)*$"}
  - {name: 🇯🇵 日本节点, type: select, include-all-providers: true, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: 🇰🇷 韩国节点, type: select, include-all-providers: true, filter: "(?=.*(韩|KR|(?i)Korea))^((?!(台|日|港|新|美)).)*$"}
  - {name: ⚖️ 负载均衡-轮询, type: load-balance, include-all-providers: true, filter: "LB", strategy: round-robin}
  - {name: ⚖️ 负载均衡-散列, type: load-balance, include-all-providers: true, filter: "LB", strategy: consistent-hashing}
  - {name: ⛓️ 代理链1, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$"}
  - {name: ⛓️ 代理链2, type: select, include-all-providers: true, filter: "^((?!.*流量|.*套餐|.*剩余|.*官网|.*订阅).)*$"}
  - {name: ⛓️ 代理链, type: relay, proxies: [⛓️ 代理链1, ⛓️ 代理链2]}

# 分流策略
rules:
  - IP-CIDR,192.168.0.0/16,直连,no-resolve
  - IP-CIDR,172.16.0.0/12,直连,no-resolve
  - IP-CIDR,10.0.0.0/8,直连,no-resolve
  - IP-CIDR,127.0.0.0/8,直连,no-resolve
  - RULE-SET,Heroku,🚀 节点选择
  - RULE-SET,Snapchat,🇯🇵 日本节点
  - RULE-SET,TikTok,🇯🇵 日本节点
  - RULE-SET,Instagram,🇯🇵 日本节点
  - RULE-SET,Custom,🚀 节点选择
  - GEOIP,CN,直连,no-resolve
  - RULE-SET,YouTube,📹 油管视频
  - RULE-SET,TalkaTone,📞 Talkatone
  - RULE-SET,Mydomain,🚀 节点选择
  - RULE-SET,PikPak,🚀 节点选择
  - RULE-SET,Cloudflare,🚀 节点选择
  - RULE-SET,Termius,🚀 节点选择
  - RULE-SET,Docker,🚀 节点选择
  - RULE-SET,SSH,💻 SSH
  - RULE-SET,RDP,💻 RDP
  - RULE-SET,ChatGPT,🥷 CHATGPT
  - RULE-SET,Emby,🎥 EMBY
  - RULE-SET,PayPal,🪙 PAYPAL
  - RULE-SET,Iqiyi,🌍 爱奇艺国际
  - RULE-SET,Telegram,📲 电报消息
  - RULE-SET,Amazon,🚀 节点选择
  - RULE-SET,AmazonPrime,🎬 AmazonPrime
  - RULE-SET,Disneyplus,🎞️ Disneyplus
  - RULE-SET,Netflix,🎥 奈飞视频
  - RULE-SET,Spotify,🎵 Spotify
  - RULE-SET,BardAI,🇺🇲 美国节点
  - RULE-SET,UnBan,直连
  - RULE-SET,GoogleFCM,📢 谷歌FCM
  - RULE-SET,GoogleCN,直连
  - RULE-SET,SteamCN,直连
  - RULE-SET,OneDrive,Ⓜ️ 微软云盘
  - RULE-SET,Microsoft,Ⓜ️ 微软服务
  - RULE-SET,Apple,🍎 苹果服务
  - RULE-SET,NetEaseMusic,🎶 网易音乐
  - RULE-SET,Epic,🎮 游戏平台
  - RULE-SET,Origin,🎮 游戏平台
  - RULE-SET,Sony,🎮 游戏平台
  - RULE-SET,Steam,🎮 游戏平台
  - RULE-SET,Nintendo,🎮 游戏平台
  - RULE-SET,BilibiliHMT,📺 哔哩哔哩
  - RULE-SET,Bilibili,📺 哔哩哔哩
  - RULE-SET,ChinaMedia,🌏 国内媒体
  - RULE-SET,ProxyMedia,🌍 国外媒体
  - RULE-SET,ProxyGFWlist,🚀 节点选择
  - RULE-SET,ChinaDomain,直连
  - RULE-SET,ChinaCompanyIp,直连
  - RULE-SET,Cn_Domain,直连
  - RULE-SET,Cn_Ip,直连
  - RULE-SET,geolocation-!cn,直连
  - RULE-SET,Download,直连
  - RULE-SET,Lan,直连
  - MATCH,🐟 漏网之鱼


# 
rule-anchor:
  # classical 规则相关
  classical: &classical {type: http, interval: 86400, behavior: classical, format: text}
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: text}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: text}

# 规则集 只保留 path 则读取本地规则
rule-providers:
  Heroku:
    <<: *classical
    path: ./proxy_rules/Heroku.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Heroku/Heroku.list"
  Snapchat:
    <<: *classical
    path: ./proxy_rules/Snap.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Snap/Snap.list"
  TikTok:
    <<: *classical
    path: ./proxy_rules/TikTok.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/TikTok/TikTok.list"
  Instagram:
    <<: *classical
    path: ./proxy_rules/Instagram.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Instagram/Instagram.list"
  Custom:
    <<: *classical
    path: ./proxy_rules/custom.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/custom.list"
  YouTube:
    <<: *classical
    path: ./proxy_rules/YouTube.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/YouTube/YouTube.list"
  TalkaTone:
    <<: *classical
    path: ./proxy_rules/talkatone.ini
    url: "https://github.com/kissyouhunter/Tools/raw/main/Subconverter/talkatone.ini"
  Mydomain:
    <<: *classical
    path: ./proxy_rules/mydomain.list
    url: "https://github.com/kissyouhunter/Tools/raw/main/Subconverter/mydomain.list"
  PikPak:
    <<: *classical
    path: ./proxy_rules/PikPak.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/PikPak.list"
  Cloudflare:
    <<: *classical
    path: ./proxy_rules/Cloudflare.list
    url: "https://github.com/kissyouhunter/Tools/raw/main/Subconverter/Cloudflare.list"
  Netflix:
    <<: *classical
    path: ./proxy_rules/Netflix.list
    url: "https://github.com/kissyouhunter/ios_rule_script/raw/master/rule/Clash/Netflix/Netflix.list"
  Termius:
    <<: *classical
    path: ./proxy_rules/Termius.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/Termius.list"
  Docker:
    <<: *classical
    path: ./proxy_rules//Docker.list
    url: "https://github.com/kissyouhunter/ios_rule_script/raw/master/rule/Clash/Docker/Docker.list"
  SSH:
    <<: *classical
    path: ./proxy_rules/SSH.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/SSH.list"
  RDP:
    <<: *classical
    path: ./proxy_rules/RDP.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/RDP.list"
  ChatGPT:
    <<: *classical
    path: ./proxy_rules/OpenAI.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.list"
  Emby:
    <<: *classical
    path: ./proxy_rules/EMBY.list
    url: "https://raw.githubusercontent.com/kissyouhunter/Tools/main/Subconverter/EMBY.list"
  PayPal:
    <<: *classical
    path: ./proxy_rules/PayPal.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/PayPal/PayPal.list"
  Iqiyi:
    <<: *classical
    path: ./proxy_rules/iQIYIIntl.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/iQIYIIntl/iQIYIIntl.list"
  Amazon:
    <<: *classical
    path: ./proxy_rules/Amazon.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Amazon/Amazon.list"
  AmazonPrime:
    <<: *classical
    path: ./proxy_rules/AmazonPrimeVideo.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/AmazonPrimeVideo/AmazonPrimeVideo.list"
  Disneyplus:
    <<: *classical
    path: ./proxy_rules/Disney.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Disney/Disney.list"
  Spotify:
    <<: *classical
    path: ./proxy_rules/Spotify.list
    url: "https://raw.githubusercontent.com/kissyouhunter/ios_rule_script/master/rule/Clash/Spotify/Spotify.list"
  BardAI:
    <<: *classical
    path: ./proxy_rules/BardAI.list
    url: "https://github.com/kissyouhunter/ios_rule_script/raw/master/rule/Clash/BardAI/BardAI.list"
  UnBan:
    <<: *classical
    path: ./proxy_rules/UnBan.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/UnBan.list"
  GoogleFCM:
    <<: *classical
    path: ./proxy_rules/GoogleFCM.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/GoogleFCM.list"
  GoogleCN:
    <<: *classical
    path: ./proxy_rules/GoogleCN.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/GoogleCN.list"
  SteamCN:
    <<: *classical
    path: ./proxy_rules/SteamCN.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/SteamCN.list"
  OneDrive:
    <<: *classical
    path: ./proxy_rules/OneDrive.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/OneDrive.list"
  Microsoft:
    <<: *classical
    path: ./proxy_rules/Microsoft.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Microsoft.list"
  Apple:
    <<: *classical
    path: ./proxy_rules/Apple.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Apple.list"
  Telegram:
    <<: *classical
    path: ./proxy_rules/Telegram.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Telegram.list"
  NetEaseMusic:
    <<: *classical
    path: ./proxy_rules/NetEaseMusic.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/NetEaseMusic.list"
  Epic:
    <<: *classical
    path: ./proxy_rules/Epic.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Epic.list"
  Origin:
    <<: *classical
    path: ./proxy_rules/Origin.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Origin.list"
  Sony:
    <<: *classical
    path: ./proxy_rules/Sony.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Sony.list"
  Steam:
    <<: *classical
    path: ./proxy_rules/Steam.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Steam.list"
  Nintendo:
    <<: *classical
    path: ./proxy_rules/Nintendo.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Nintendo.list"
  BilibiliHMT:
    <<: *classical
    path: ./proxy_rules/BilibiliHMT.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/BilibiliHMT.list"
  Bilibili:
    <<: *classical
    path: ./proxy_rules/Bilibili.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/Bilibili.list"
  ChinaMedia:
    <<: *classical
    path: ./proxy_rules/ChinaMedia.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaMedia.list"
  ProxyMedia:
    <<: *classical
    path: ./proxy_rules/ProxyMedia.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyMedia.list"
  ProxyGFWlist:
    <<: *classical
    path: ./proxy_rules/ProxyGFWlist.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ProxyGFWlist.list"
  ChinaDomain:
    <<: *classical
    path: ./proxy_rules/ChinaDomain.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list"
  ChinaCompanyIp:
    <<: *classical
    path: ./proxy_rules/ChinaCompanyIp.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list"
  Cn_Domain:
    <<: *domain
    path: ./proxy_rules/geosite/cn_domain.list
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.list"
  Cn_Ip:
    <<: *ip
    path: ./proxy_rules/cn_ip.list
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.list"
  geolocation-!cn:
    <<: *domain
    path: ./proxy_rules/geolocation-!cn.list
    url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.list"
  Download:
    <<: *classical
    path: ./proxy_rules/ownload.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list"
  Lan:
    <<: *classical
    path: ./proxy_rules/LocalAreaNetwork.list
    url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/LocalAreaNetwork.list"

# 屏蔽443
script:
  shortcuts:
    quic: network == 'udp' and dst_port == 443
